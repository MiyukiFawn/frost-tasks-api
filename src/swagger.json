{
  "openapi": "3.0.0",
  "info": {
    "title": "Frost Tasks API",
    "version": "1.0.0",
    "description": "Simple API used for [Frost Tasks](http://localhost:4200)"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/user": {
      "summary": "User operations",
      "description": "This route is used to Create new Users and Update or Delete existing ones",
      "post": {
        "summary": "Create user",
        "description": "Create a new user.",
        "operationId": "create_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_user"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "description": "Failed to authenticate reCaptcha token"
          },
          "409": {
            "description": "Username or email already registered"
          }
        },
        "tags": ["User"]
      },
      "put": {
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "update_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/authenticated"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Username or email already in use"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["User"]
      },
      "delete": {
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "delete_user",
        "responses": {
          "202": {
            "description": "User deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["User"]
      }
    },
    "/login": {
      "summary": "Authenticate the user on the application",
      "description": "This route generate two JWT Tokens, a access token, and a refresh token. The access token is required in almost all the other operations, while the refresh token is only used when refreshing the access token.",
      "post": {
        "summary": "Login on the api",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/authenticated"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "description": "Incorrect password"
          },
          "404": {
            "description": "Username not found"
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/refresh": {
      "summary": "Refresh the access token",
      "description": "This route regenerate the two JWT Tokens created on the login process",
      "post": {
        "summary": "Refresh the access and refresh tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refresh_login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/authenticated"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Username not found"
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/tasks": {
      "summary": "Tasks operations",
      "description": "This route is used to Create new Tasks and Update or Delete existing ones",
      "get": {
        "summary": "Get array of tasks",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                      },
                      "title": {
                        "type": "string",
                        "example": "Clean the house"
                      },
                      "description": {
                        "type": "string",
                        "example": "Sweep the 1st floor and clean the dust on the 2nd floor"
                      },
                      "status": {
                        "type": "string",
                        "enum": ["CHECKED", "UNCHECKED", "DELETED"]
                      },
                      "creation_date": {
                        "type": "string",
                        "example": "2023-08-22T21:39:04.646Z"
                      },
                      "userId": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Task"]
      },
      "post": {
        "summary": "Create a new task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "title": {
                      "type": "string",
                      "example": "Clean the house"
                    },
                    "description": {
                      "type": "string",
                      "example": "Sweep the 1st floor and clean the dust on the 2nd floor"
                    },
                    "status": {
                      "type": "string",
                      "enum": ["CHECKED", "UNCHECKED", "DELETED"]
                    },
                    "creation_date": {
                      "type": "string",
                      "example": "2023-08-22T21:39:04.646Z"
                    },
                    "userId": {
                      "type": "string",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Task"]
      },
      "put": {
        "summary": "Update task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "title": {
                      "type": "string",
                      "example": "Clean the house"
                    },
                    "description": {
                      "type": "string",
                      "example": "Sweep the 1st floor and clean the dust on the 2nd floor"
                    },
                    "status": {
                      "type": "string",
                      "enum": ["CHECKED", "UNCHECKED", "DELETED"]
                    },
                    "creation_date": {
                      "type": "string",
                      "example": "2023-08-22T21:39:04.646Z"
                    },
                    "userId": {
                      "type": "string",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Task not founded"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Task"]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "badRequest": {
        "description": "The server failed to validate the Request body. Provides a json containing details about the problems",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "status_code": 400,
                "success": false,
                "error": {
                  "issues": [
                    {
                      "code": "invalid_type,",
                      "expected": "string,",
                      "received": "undefined,",
                      "path": ["username"]
                    }
                  ],
                  "message": "username is required"
                },
                "name": "ZodError"
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      },
      "authenticated": {
        "description": "User updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string",
                  "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ"
                },
                "refresh_token": {
                  "type": "string",
                  "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIn0.nVDgQ56C2sglAmnNkzNLUrTEpmDnNjTJybyCm_PUYWUF3QXAtrOHmFc0UiAj8aGPw109nUvoCjtTdquu3mhUY-_c07KrdWsgZY6rKA-63ILSZiV_W6qgUAWWHo49Fu5gPBaOyZNgaa_bxcKqElqAebybA6AjfzEJxx5kY68aih1uXqsf_HpecjVkFATeWdZeyM8RvVtAE7tEuqqwHeDlzQgWCwrsUYZdkvh_h0rn_oQ6vgirnrOD1xfKUg0EDIFtNd3cjQtU-LR7FRwDKJDwJa0oAwspd0rIeyjtWGBNJG_fGfnYHg9oqFzn1L4tWZC2hNrQwFykxTiOyCxsFF1c0Q"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "create_user": {
        "title": "Create User",
        "required": ["username", "email", "password", "confirm_password", "reCaptcha_token"],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 5,
            "example": "Jhon Doe"
          },
          "email": {
            "type": "string",
            "example": "jhondoe@email.com"
          },
          "password": {
            "type": "string",
            "minLength": 5,
            "example": "Password123"
          },
          "confirm_password": {
            "type": "string",
            "minLength": 5,
            "example": "Password123"
          },
          "reCaptcha_token": {
            "type": "string"
          }
        }
      },
      "update_user": {
        "title": "Update User",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 5,
            "example": "Jhon Doe"
          },
          "email": {
            "type": "string",
            "example": "jhondoe@email.com"
          },
          "password": {
            "type": "string",
            "minLength": 5,
            "example": "Password123"
          },
          "confirm_password": {
            "type": "string",
            "minLength": 5,
            "example": "Password123"
          }
        }
      },
      "login": {
        "title": "Login",
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 5,
            "example": "Jhon Doe"
          },
          "password": {
            "type": "string",
            "minLength": 5,
            "example": "Password123"
          }
        }
      },
      "refresh_login": {
        "title": "Refresh Login",
        "required": ["refresh_token"],
        "properties": {
          "refresh_token": {
            "type": "string",
            "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIn0.nVDgQ56C2sglAmnNkzNLUrTEpmDnNjTJybyCm_PUYWUF3QXAtrOHmFc0UiAj8aGPw109nUvoCjtTdquu3mhUY-_c07KrdWsgZY6rKA-63ILSZiV_W6qgUAWWHo49Fu5gPBaOyZNgaa_bxcKqElqAebybA6AjfzEJxx5kY68aih1uXqsf_HpecjVkFATeWdZeyM8RvVtAE7tEuqqwHeDlzQgWCwrsUYZdkvh_h0rn_oQ6vgirnrOD1xfKUg0EDIFtNd3cjQtU-LR7FRwDKJDwJa0oAwspd0rIeyjtWGBNJG_fGfnYHg9oqFzn1L4tWZC2hNrQwFykxTiOyCxsFF1c0Q"
          }
        }
      },
      "create_task": {
        "title": "Create Task",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "example": "Clean the house",
            "minLength": 5
          },
          "description": {
            "type": "string",
            "example": "Sweep the 1st floor and clean the dust on the 2nd floor",
            "maxLength": 255
          }
        }
      },
      "update_task": {
        "title": "Update Task",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "title": {
            "type": "string",
            "minLength": 5
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "enum": ["CHECKED", "UNCHECKED", "DELETED"]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "User",
      "description": "User operations"
    },
    {
      "name": "Authentication",
      "description": "Authentication operations"
    },
    {
      "name": "Task",
      "description": "Task operations"
    }
  ]
}
